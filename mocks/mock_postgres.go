// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/saufiroja/cqrs/pkg/database (interfaces: IPostgres)
//
// Generated by this command:
//
//	mockgen -destination ../../mocks/mock_postgres.go -package mocks github.com/saufiroja/cqrs/pkg/database IPostgres
//

// Package mocks is a generated GoMock package.
package mocks

import (
	sql "database/sql"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIPostgres is a mock of IPostgres interface.
type MockIPostgres struct {
	ctrl     *gomock.Controller
	recorder *MockIPostgresMockRecorder
}

// MockIPostgresMockRecorder is the mock recorder for MockIPostgres.
type MockIPostgresMockRecorder struct {
	mock *MockIPostgres
}

// NewMockIPostgres creates a new mock instance.
func NewMockIPostgres(ctrl *gomock.Controller) *MockIPostgres {
	mock := &MockIPostgres{ctrl: ctrl}
	mock.recorder = &MockIPostgresMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPostgres) EXPECT() *MockIPostgresMockRecorder {
	return m.recorder
}

// CommitTransaction mocks base method.
func (m *MockIPostgres) CommitTransaction(arg0 *sql.Tx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CommitTransaction", arg0)
}

// CommitTransaction indicates an expected call of CommitTransaction.
func (mr *MockIPostgresMockRecorder) CommitTransaction(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTransaction", reflect.TypeOf((*MockIPostgres)(nil).CommitTransaction), arg0)
}

// Db mocks base method.
func (m *MockIPostgres) Db() *sql.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Db")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// Db indicates an expected call of Db.
func (mr *MockIPostgresMockRecorder) Db() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Db", reflect.TypeOf((*MockIPostgres)(nil).Db))
}

// RollbackTransaction mocks base method.
func (m *MockIPostgres) RollbackTransaction(arg0 *sql.Tx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RollbackTransaction", arg0)
}

// RollbackTransaction indicates an expected call of RollbackTransaction.
func (mr *MockIPostgresMockRecorder) RollbackTransaction(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTransaction", reflect.TypeOf((*MockIPostgres)(nil).RollbackTransaction), arg0)
}

// StartTransaction mocks base method.
func (m *MockIPostgres) StartTransaction() (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTransaction")
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTransaction indicates an expected call of StartTransaction.
func (mr *MockIPostgresMockRecorder) StartTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransaction", reflect.TypeOf((*MockIPostgres)(nil).StartTransaction))
}

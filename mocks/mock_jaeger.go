// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/saufiroja/cqrs/pkg/tracing (interfaces: ITracing)
//
// Generated by this command:
//
//	mockgen -destination ../../mocks/mock_jaeger.go -package mocks github.com/saufiroja/cqrs/pkg/tracing ITracing
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	opentracing "github.com/opentracing/opentracing-go"
	gomock "go.uber.org/mock/gomock"
)

// MockITracing is a mock of ITracing interface.
type MockITracing struct {
	ctrl     *gomock.Controller
	recorder *MockITracingMockRecorder
}

// MockITracingMockRecorder is the mock recorder for MockITracing.
type MockITracingMockRecorder struct {
	mock *MockITracing
}

// NewMockITracing creates a new mock instance.
func NewMockITracing(ctrl *gomock.Controller) *MockITracing {
	mock := &MockITracing{ctrl: ctrl}
	mock.recorder = &MockITracingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITracing) EXPECT() *MockITracingMockRecorder {
	return m.recorder
}

// StartSpan mocks base method.
func (m *MockITracing) StartSpan(arg0 context.Context, arg1 string, arg2 ...opentracing.StartSpanOption) (opentracing.Span, context.Context) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartSpan", varargs...)
	ret0, _ := ret[0].(opentracing.Span)
	ret1, _ := ret[1].(context.Context)
	return ret0, ret1
}

// StartSpan indicates an expected call of StartSpan.
func (mr *MockITracingMockRecorder) StartSpan(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSpan", reflect.TypeOf((*MockITracing)(nil).StartSpan), varargs...)
}

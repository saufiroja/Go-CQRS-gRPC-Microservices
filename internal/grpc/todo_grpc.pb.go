// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// datasources: todos/todo.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Todos_InsertTodo_FullMethodName           = "/todos.Todos/InsertTodo"
	Todos_GetAllTodos_FullMethodName          = "/todos.Todos/GetAllTodos"
	Todos_GetTodoById_FullMethodName          = "/todos.Todos/GetTodoById"
	Todos_UpdateTodoById_FullMethodName       = "/todos.Todos/UpdateTodoById"
	Todos_UpdateTodoStatusById_FullMethodName = "/todos.Todos/UpdateTodoStatusById"
	Todos_DeleteTodoById_FullMethodName       = "/todos.Todos/DeleteTodoById"
)

// TodosClient is the client API for Todos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodosClient interface {
	InsertTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*Empty, error)
	GetAllTodos(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TodoResponse, error)
	GetTodoById(ctx context.Context, in *TodoParams, opts ...grpc.CallOption) (*GetTodoResponse, error)
	UpdateTodoById(ctx context.Context, in *UpdateTodoRequest, opts ...grpc.CallOption) (*Empty, error)
	UpdateTodoStatusById(ctx context.Context, in *UpdateTodoStatusRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteTodoById(ctx context.Context, in *TodoParams, opts ...grpc.CallOption) (*Empty, error)
}

type todosClient struct {
	cc grpc.ClientConnInterface
}

func NewTodosClient(cc grpc.ClientConnInterface) TodosClient {
	return &todosClient{cc}
}

func (c *todosClient) InsertTodo(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Todos_InsertTodo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todosClient) GetAllTodos(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TodoResponse, error) {
	out := new(TodoResponse)
	err := c.cc.Invoke(ctx, Todos_GetAllTodos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todosClient) GetTodoById(ctx context.Context, in *TodoParams, opts ...grpc.CallOption) (*GetTodoResponse, error) {
	out := new(GetTodoResponse)
	err := c.cc.Invoke(ctx, Todos_GetTodoById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todosClient) UpdateTodoById(ctx context.Context, in *UpdateTodoRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Todos_UpdateTodoById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todosClient) UpdateTodoStatusById(ctx context.Context, in *UpdateTodoStatusRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Todos_UpdateTodoStatusById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todosClient) DeleteTodoById(ctx context.Context, in *TodoParams, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Todos_DeleteTodoById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodosServer is the server API for Todos service.
// All implementations should embed UnimplementedTodosServer
// for forward compatibility
type TodosServer interface {
	InsertTodo(context.Context, *TodoRequest) (*Empty, error)
	GetAllTodos(context.Context, *Empty) (*TodoResponse, error)
	GetTodoById(context.Context, *TodoParams) (*GetTodoResponse, error)
	UpdateTodoById(context.Context, *UpdateTodoRequest) (*Empty, error)
	UpdateTodoStatusById(context.Context, *UpdateTodoStatusRequest) (*Empty, error)
	DeleteTodoById(context.Context, *TodoParams) (*Empty, error)
}

// UnimplementedTodosServer should be embedded to have forward compatible implementations.
type UnimplementedTodosServer struct {
}

func (UnimplementedTodosServer) InsertTodo(context.Context, *TodoRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertTodo not implemented")
}
func (UnimplementedTodosServer) GetAllTodos(context.Context, *Empty) (*TodoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTodos not implemented")
}
func (UnimplementedTodosServer) GetTodoById(context.Context, *TodoParams) (*GetTodoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodoById not implemented")
}
func (UnimplementedTodosServer) UpdateTodoById(context.Context, *UpdateTodoRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTodoById not implemented")
}
func (UnimplementedTodosServer) UpdateTodoStatusById(context.Context, *UpdateTodoStatusRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTodoStatusById not implemented")
}
func (UnimplementedTodosServer) DeleteTodoById(context.Context, *TodoParams) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodoById not implemented")
}

// UnsafeTodosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodosServer will
// result in compilation errors.
type UnsafeTodosServer interface {
	mustEmbedUnimplementedTodosServer()
}

func RegisterTodosServer(s grpc.ServiceRegistrar, srv TodosServer) {
	s.RegisterService(&Todos_ServiceDesc, srv)
}

func _Todos_InsertTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodosServer).InsertTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Todos_InsertTodo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodosServer).InsertTodo(ctx, req.(*TodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todos_GetAllTodos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodosServer).GetAllTodos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Todos_GetAllTodos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodosServer).GetAllTodos(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todos_GetTodoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodosServer).GetTodoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Todos_GetTodoById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodosServer).GetTodoById(ctx, req.(*TodoParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todos_UpdateTodoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodosServer).UpdateTodoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Todos_UpdateTodoById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodosServer).UpdateTodoById(ctx, req.(*UpdateTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todos_UpdateTodoStatusById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTodoStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodosServer).UpdateTodoStatusById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Todos_UpdateTodoStatusById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodosServer).UpdateTodoStatusById(ctx, req.(*UpdateTodoStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todos_DeleteTodoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodosServer).DeleteTodoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Todos_DeleteTodoById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodosServer).DeleteTodoById(ctx, req.(*TodoParams))
	}
	return interceptor(ctx, in, info, handler)
}

// Todos_ServiceDesc is the grpc.ServiceDesc for Todos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Todos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todos.Todos",
	HandlerType: (*TodosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertTodo",
			Handler:    _Todos_InsertTodo_Handler,
		},
		{
			MethodName: "GetAllTodos",
			Handler:    _Todos_GetAllTodos_Handler,
		},
		{
			MethodName: "GetTodoById",
			Handler:    _Todos_GetTodoById_Handler,
		},
		{
			MethodName: "UpdateTodoById",
			Handler:    _Todos_UpdateTodoById_Handler,
		},
		{
			MethodName: "UpdateTodoStatusById",
			Handler:    _Todos_UpdateTodoStatusById_Handler,
		},
		{
			MethodName: "DeleteTodoById",
			Handler:    _Todos_DeleteTodoById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "todos/todo.proto",
}
